#!/dev/env python

import os, re
from os.path import isfile, join

source_path = "src"

files = [f for f in os.listdir(source_path) if isfile(join(source_path, f))]
headers = [f for f in files if f.endswith(".h")]
sources = [f for f in files if f.endswith(".c")]
sources.remove("main.c")

processed_headers = set()
processed_sources = set()

generate_source = [ ]

def dump_header(header):
	if header in processed_headers: return
	processed_headers.add(header)
	header_src = open(join(source_path, header)).read()
	for dep in re.findall('#include "(.+)"', header_src):
		dump_header(dep)
	generate_source.append(header_src)

for header in headers:
	dump_header(header)

for source in sources:
	generate_source.append(open(join(source_path, source)).read())

def comment_remover(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " " # note: a space and not an empty string
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)

generate_source = ''.join(generate_source)
generate_source = generate_source.replace("#pragma once", "")
generate_source = comment_remover(generate_source)
generate_source = re.sub('#include ".+"', "", generate_source)
generate_source = """/*
 * koji scripting language
 * Copyright (C) 2015 Canio Massimo Tristano <massimo.tristano@gmail.com>
 * For licensing info see LICENSE.md.
 * NOTE: this file has been autogenerated from koji source files and is inteded
 * for ridistribution only. Do not manually changed this file, but apply changes
 * to koji source files and executed the extra/generate.py script to regenerate
 * this file.
 */
""" + generate_source

open("koji.c", "w").write(generate_source)

open("koji.h", "w").write(open("src/api.h").read())